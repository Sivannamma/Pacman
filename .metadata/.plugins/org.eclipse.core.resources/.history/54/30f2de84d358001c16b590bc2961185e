import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;

public class ChasingBFS implements ChaseBehaviour {

	// start position of the ghost
	Point start;
	// end position (where the ghost needs to go)
	Point end;
	// our graph
	IGraph graph;


	@Override
	public ArrayList<Point> chase(Point start, Point end, IGraph graph) {
		this.start = start;
		this.end = end;
		this.graph= graph;

		return new BFS(start , end , graph).performBFS();
	}

	private ArrayList<Point> BFS() {
		clearBFS();

		queue.add(start);
        blackend.add(start);

        while (!queue.isEmpty()) {

            Point current = queue.poll();

            // reached the desintation
            if (current == end) {
                path.add(end);

                while (previous.containsKey(current)) {
                    current = previous.get(current);
                    path.add(current);
                }

                Collections.reverse(path);
                break;
            } else {
                HashMap<String, Point> neighbors = graph.neighbors(current);
                for (Point p : neighbors.values()) {
                    if (blackend.contains(p)) {
                        continue;
                    }
                    queue.add(p);
                    blackend.add(p);
                    previous.put(p, current);
                }
            }
        }

        return path;

	}


	/*
	 * clearning the content before we use this for bfs function
	 */
	private void clearBFS() {
		queue.clear();
		blackend.clear();
		previous.clear();
		path.clear();
	}
}
