import java.util.ArrayList;

public class Ghost implements Runnable{

	private int corX;
	private int corY;

	private static int pacX;
	private static int pacY;
	private ChaseBehaviour chase;
	private  IGraph graph;
	private ArrayList<Point> moves;
	private Point [][] points;
	private rePainting board;

	//        this.moves = new ArrayList<Point>();
	Ghost(int corX, int corY, ChaseBehaviour chase, IGraph graph, rePainting board){
		this.corX = corX;
		this.corY = corY;
		this.chase = chase;
		this.graph = graph;
		this.board= board;

		if (graph instanceof PacmanGraph) {
			points = ((PacmanGraph) graph).getGraph();
		}

	}



	// static function that will perfurm on all ghosts.
	public static void setCoordinates(int corX, int corY) {
		pacX = corX;
		pacY = corY;
	}



	@Override
	public void run() {
		try {
			while (true) {
				Point pac = points[(pacY-7)/PacmanBoard.BLOCK_SIZE][(pacX-7)/PacmanBoard.BLOCK_SIZE];
				Point ghost = points[(corY-7)/PacmanBoard.BLOCK_SIZE][(corX-7)/PacmanBoard.BLOCK_SIZE];
				moves = chase.chase(ghost, pac, graph);
				move();
			}
		} catch (Exception ex) {
			ex.printStackTrace();
			System.exit(0);
		}

	}

	public int getCorX() {
		return corX;
	}

	public int getCorY() {
		return corY;
	}

	private void move() throws InterruptedException {
		for (int i = 0; i < moves.size(); i++) {
			corY = moves.get(i).getIndRow() * PacmanBoard.BLOCK_SIZE + 7;
			corX = moves.get(i).getIndCol() * PacmanBoard.BLOCK_SIZE + 7;
			board.setRepaint();
			Thread.sleep(120);
		}
	}
}
